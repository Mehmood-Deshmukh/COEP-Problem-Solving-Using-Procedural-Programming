Notes 31 Aug 2023
Data Representation using Computers.

Q: List the data that you have dealt with in real life.
Q. Can you categorize data from real life?

One way of categorizing real life data:
Integer
Real Numbers
Sequence of Characters.

Above categorization excludes many types of data e.g. Music, Images, Videos, etc. but still covers a lot.

Computers/Processors (e.g. i3, i5, snapdragon, rayzon, etc), that is "hardware" can deal with Limited Sized integer and real numbers.

--
The Binary Number System is used to represent Numerical data in processor/computers.

Lets begin with Decimal number system.

By "387" we understand Three Hundred Eighty Seven, that is
387 = 300 + 80 + 7 
    = 3 * 100 + 8 * 10 + 7
    = 3 * 10^2 + 8 * 10^1 + 7 * 10^0 

(10^2 means 10 raised to power 2)

Here powers of 2 are used for positional weight of a "digit" 

Decimal number system: a number system with 10 digits 1, 2, ..., 9 and 0; with base of 10, and using powers of 10 as positional weights.

Like this we can imagine any number system.

--

A ternary number system. 
Uses 0, 1, 2 as symbols
Has 3 as base
Uses powers of 3 as positional weights.

So
(212) in ternary is
2 * 3^2 +  1 * 3^1 + 2 * 3^0 = 23 in decimal.

(431) is an invalid number in ternary.
--

Binary number system
Uses 0, 1 bits
Has 2 as base
uses powers of 2 as positional weights.

So
(101) in binary is 
1 * 2^2 + 0 * 2^1 + 1 * 2^0  = 5 in decimal 

Interestingly because each power of 2 is multiplied by either 0 or 1, we either "take it or leave it", unlike in other number systems where possibility of multiplication by 1 or 2 or 3 etc exists. 


Sequence of numbers in decimal is derived by adding 1 to last number, and using 0 specially to start a new sequence.
E.g.
1, 2, 3, ... 9 are followed by 

10
that is 1 and then 0 which means ten

10 is followed by 10 + 1 = 11 
11 is followed by 11 + 1 = 12 
For addition, we follow the "carry" method.
So
19 is followed by 19 + 1 = 20 

Similarly in binary, the number sequence is generated by adding 1 to last number, using 0 in a special way, and using carries. 

So the sequence of binary numbers is 
1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111, etc. 

---
Converting binary to decimal.
is Easy.
Simply use positional weights of powers of 2 and do the summation.

(1011) in binary = 
1 * 2^ 3 + 0 * 2 ^2 + 1 * 2^1 + 1 * 2^0 
= 8 + 0 + 2 + 1
= 11 in decimal.

Note: here we included 8, 2, 1, and excluded 4 in addition.

Theorem: Any number can be expressed as a sum of powers of two.
Can you prove this theorem? 
This will get covered in other courses, later.


--
Converting Decimal to binary
the principle we use here is that any number is a sum of powers of two.
as we know the fact that we "take or leave" a power of two, in representing a number in binary.

So , let's take 23.
Can we express 23 as sum of powers of 2?
Yes.
23 = 16 + 4 + 2 + 1
Here we excluded 8.
So, we took 2^4, 2^2, 2^1, 2^0, and left 2^3. 

23 in decimal = (10111) in binary.

But this process relies on we remembering powers of two and doing addition/sustraction intelligently.

--
Better method

Keep dividing the number by 2, and remembering the reminder.
Dividor   No/2   Reminder
2         23 
          11        1
          5         1
          2         1
          1         0
          0         1
   
Now read reminders in reverse and you get (10111) that is binary of 23. 

Lets try 87
Dividor   No/2   Reminder
2         87 
          43        1
          21        1
          10        1
          5         0
          2         1
          1         0
          0         1

So (1010111) is binary of 87.

---

Some important notes about binary numbers.

1 is 1
11 is 3
111 is 7
1111 is 15
so 
n times 1 is (2^n-1)

---
Some important notes about binary numbers.

2^10 = 1024 ~= 1000
2^20 = 1024*1024 ~= 1 million or 10 lakhs
2^30 = 1024*1024*1024 ~= 1 billion or 100 crore

Notations
K = 1000,         Ki = 1024      = 2^10 
M = 1000000,      Mi = 1024*1024 = 2^20 
G = 1000000000,   Gi = 1024^3    = 2^30 

---

Now, so far we dicussed mathematics.
Lets turn back to Data representation using computers.

The computer/processor can store and process. 
limited size integers and real numbers. 

E.g. xyz processor can store 1 byte integers.
That means,
the number 5 will be stored in  1 byte = 8 bits, as 
00000101

Even if 5 needs 3 bits, it will use 8 bits! 

If the pqr processor had 4 byte mechanism for integers, then
it will store 5 as 
00000000000000000000000000000101

--

Question: if a computer has 32-bit storage for integers, then how much can you store in it?
Answer: the possibilities are from
00000000000000000000000000000000
to
11111111111111111111111111111111

that is there are 2^32 , that is ~4Billion possibilities.

So you can store India's population (~1.4 billion in it), but you can't store world population (~8 billion) in it. 






